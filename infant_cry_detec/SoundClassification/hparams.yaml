# run：
# /home/taylor/anaconda3/bin/python /home/taylor/infant_speechbrain/SoundClassification/train.py /home/taylor/infant_speechbrain/SoundClassification/hparams.yaml
# tensorboard --logdir=/home/taylor/infant_speechbrain/results/3000/tb_logs --samples_per_plugin=images=100

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 3003
__set_seed: !apply:speechbrain.utils.seed_everything [!ref <seed>]

# Set up folders for reading from and writing to
# Dataset must already exist at `audio_data_folder`
data_folder: SoundClassification/data 
data_folder_rir: !ref <data_folder>/rir # The impulse responses used for data augmentation will automatically be downloaded here.
audio_data_folder: !ref <data_folder>/audio # The folder containing the audio files
# TODO the following folder will contain the resampled audio files (mono channel and config SR) to train on
# resampled_audio_data_folder: !ref <data_folder>/audio_mono16kHz
output_folder: !ref ./results/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
csv_name: all28479.csv

# Data for augmentation
RIR_DATASET_URL: https://www.dropbox.com/scl/fi/linhy77c36mu10965a836/RIRs.zip?rlkey=pg9cu8vrpn2u173vhiqyu743u&dl=1

# torch.Tensorboard logs
use_tensorboard: True
tensorboard_logs_folder: !ref <output_folder>/tb_logs/

# Path where data manifest files will be stored
noise_annotation: !ref <data_folder>/metadata/noise.csv
noise_annotation_v: !ref <data_folder>/metadata/noise_v.csv
rir_annotation: !ref <data_folder>/metadata/rir.csv
train_annotation:  SoundClassification/manifest/train.json
valid_annotation:  SoundClassification/manifest/valid.json
# test_annotation: !ref <save_folder>/manifest/test.json

# 5 folds for multi-fold validation
train_fold_nums: [1, 2, 3, 4]
valid_fold_nums: [5]
# test_fold_nums: [10]
skip_manifest_creation: False

ckpt_interval_minutes: 10 # save checkpoint every N min


######################################## Training Parameters ####################################
number_of_epochs: 200
batch_size: 16
lr: 0.0001
base_lr: 0.0000001
max_lr: !ref <lr>
step_size: 20000
sample_rate: 16000
dropout_prob: 0.2

hpopt_mode: null
hpopt: null

# Feature parameters
n_mels: 128
left_frames: 0
right_frames: 0
deltas: False
amp_to_db: True
normalize: True

# Number of classes
out_n_neurons: 2

# Data loader options
shuffle: True
num_workers: 4
dataloader_options:
    batch_size: !ref <batch_size>
    shuffle: !ref <shuffle>
    num_workers: !ref <num_workers>

############################################### MODELS ###########################################
compute_features: !new:torchaudio.transforms.MelSpectrogram
    sample_rate: 16000
    n_fft: 512
    win_length: 512
    hop_length: 400
    normalized: True
    center: True
    pad_mode: "reflect"
    power: 2.0
    norm: "slaney"
    n_mels: !ref <n_mels>
    mel_scale: "htk"

# compute_features: !new:speechbrain.lobes.features.Fbank
#     n_mels: !ref <n_mels>
#     left_frames: !ref <left_frames>
#     right_frames: !ref <right_frames>
#     deltas: !ref <deltas>

# compute_features: !new:torchaudio.transforms.Spectrogram
#     n_fft: 512
#     win_length: 512
#     hop_length: 600
#     normalized: True
#     power: 2


# embedding_model: !new:speechbrain.lobes.models.ECAPA_TDNN.ECAPA_TDNN
#     input_size: !ref <n_mels>
#     channels:  [512, 512, 512, 512, 1024]  
#     kernel_sizes: [5, 3, 3, 3, 1]
#     dilations: [1, 2, 3, 4, 1]
#     attention_channels: 128  
#     lin_neurons: 100  

classifier: !new:speechbrain.lobes.models.ECAPA_TDNN.Classifier
    input_size: 100  # 与 lin_neurons 保持一致
    out_neurons: !ref <out_n_neurons>

embedding_model: !new:ablation.no_CCA.proposed_model
#embedding_model: !new:proposed_model.proposed_model
# embedding_model: !new:crnn.Crnn
# embedding_model: !new:resnet.mobile
# embedding_model: !new:resnet.resnet
# embedding_model: !new:bsnet.Conformer
# embedding_model: !new:speechbrain.lobes.models.CRDNN.CRDNN
# embedding_model: !new:rnn.SimpleLSTM
# embedding_model: !new:mymodel.Crnn

####################################################### pretrain #########################################################
use_pretrained_model: False
pretrained_model_name: spkrec-ecapa-voxceleb
pretrained_embedding_model_path: !ref /home/taylor/infant_speechbrain/SoundClassification/model/embedding_model.ckpt
pretrained_embedding_model: !new:speechbrain.utils.parameter_transfer.Pretrainer
  collect_in: !ref /home/taylor/infant_speechbrain/SoundClassification/model
  loadables:
    model: !ref <embedding_model>
  paths:
    model: !ref <pretrained_embedding_model_path>


########################################## Augmentation #################################################################################
# Speed perturbation
speed_changes: [80,90, 110,120]  # List of speed changes for time-stretching

speed_perturb: !new:speechbrain.augment.time_domain.SpeedPerturb
    orig_freq: !ref <sample_rate>
    speeds: !ref <speed_changes>
    device: 'cuda'

# Add noise to input signal
add_noise: !new:speechbrain.augment.time_domain.AddNoise
    csv_file: !ref <noise_annotation>
    snr_low: -20
    snr_high: 0
    noise_sample_rate: !ref <sample_rate>
    clean_sample_rate: !ref <sample_rate>
    num_workers: !ref <num_workers>

add_noise_v: !new:speechbrain.augment.time_domain.AddNoise
    csv_file: !ref <noise_annotation_v>
    snr_low: 0
    snr_high: 0
    noise_sample_rate: !ref <sample_rate>
    clean_sample_rate: !ref <sample_rate>
    num_workers: !ref <num_workers>


# Add reverberation to input signal
add_reverb: !new:speechbrain.augment.time_domain.AddReverb
    csv_file: !ref <rir_annotation>
    reverb_sample_rate: !ref <sample_rate>
    clean_sample_rate: !ref <sample_rate>
    num_workers: !ref <num_workers>


# Frequency drop: randomly drops a number of frequency bands to zero.
drop_freq_low: 1e-14  # Min frequency band dropout probability
drop_freq_high: 1  # Max frequency band dropout probability
drop_freq_count_low: 1  # Min number of frequency bands to drop
drop_freq_count_high: 2  # Max number of frequency bands to drop
drop_freq_width: 0.05  # Width of frequency bands to drop

drop_freq: !new:speechbrain.augment.time_domain.DropFreq
    drop_freq_low: !ref <drop_freq_low>
    drop_freq_high: !ref <drop_freq_high>
    drop_freq_count_low: !ref <drop_freq_count_low>
    drop_freq_count_high: !ref <drop_freq_count_high>
    drop_freq_width: !ref <drop_freq_width>

# Time drop: randomly drops a number of temporal chunks.
drop_chunk_count_low: 1  # Min number of audio chunks to drop
drop_chunk_count_high: 2  # Max number of audio chunks to drop
drop_chunk_length_low: 8000  # Min length of audio chunks to drop
drop_chunk_length_high: 12000  # Max length of audio chunks to drop

drop_chunk: !new:speechbrain.augment.time_domain.DropChunk
    drop_length_low: !ref <drop_chunk_length_low>
    drop_length_high: !ref <drop_chunk_length_high>
    drop_count_low: !ref <drop_chunk_count_low>
    drop_count_high: !ref <drop_chunk_count_high>

# Augmenter: Combines previously defined augmentations to perform data augmentation
wav_augment_train: !new:speechbrain.augment.augmenter.Augmenter
    parallel_augment: False
    concat_original: False
    repeat_augment: 1
    shuffle_augmentations: True
    min_augmentations: 5
    max_augmentations: 5
    augment_prob: 1
    augmentations: [
        !ref <speed_perturb>,
        !ref <add_noise>,
        !ref <add_reverb>,
        !ref <drop_freq>,
        !ref <drop_chunk>
        ]

wav_augment_valid: !new:speechbrain.augment.augmenter.Augmenter
    parallel_augment: False
    concat_original: False
    repeat_augment: 1
    shuffle_augmentations: True
    min_augmentations: 2
    max_augmentations: 2
    augment_prob: 1
    augmentations: [
        !ref <add_noise_v>,
        !ref <add_reverb>,
        ]

mean_var_norm: !new:speechbrain.processing.features.InputNormalization
    norm_type: sentence
    std_norm: False

modules:
    compute_features: !ref <compute_features>
    embedding_model: !ref <embedding_model>
    classifier: !ref <classifier>
    mean_var_norm: !ref <mean_var_norm>

compute_cost: !new:speechbrain.nnet.losses.LogSoftmaxWrapper
    loss_fn: !new:speechbrain.nnet.losses.AdditiveAngularMargin
        margin: 0.2
        scale: 30

compute_error: !name:speechbrain.nnet.losses.classification_error

opt_class: !name:torch.optim.Adam
    lr: !ref <lr>
    weight_decay: 0.000002

lr_annealing: !new:speechbrain.nnet.schedulers.CyclicLRScheduler
    base_lr: !ref <base_lr>
    max_lr: !ref <max_lr>
    step_size: !ref <step_size>

# Logging + checkpoints
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>
    
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        embedding_model: !ref <embedding_model>
        classifier: !ref <classifier>
        normalizer: !ref <mean_var_norm>
        counter: !ref <epoch_counter>
